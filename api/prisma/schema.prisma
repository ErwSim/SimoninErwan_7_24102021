generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Image {
  id          Int     @id @default(autoincrement())
  uri         String
  description String?
}

model Category {
  id                 Int     @id @default(autoincrement())
  name               String  @db.VarChar(100)
  imageUri           String
  description        String?
  backgroundFallback Bytes   @default(dbgenerated("(0xffffff)")) @db.VarBinary(3)
  Posts              Post[]
}

model Post {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(255)
  createdAt    DateTime       @default(now()) @db.DateTime(0)
  content      String         @db.LongText
  spoiler      Boolean        @default(false)
  userId       Int
  categoryId   Int
  messageId    Int?
  Category     Category       @relation(fields: [categoryId], references: [id])
  postMessages Post?          @relation("postMessages", fields: [messageId], references: [id])
  User         User           @relation(fields: [userId], references: [id])
  messages     Post[]         @relation("postMessages")
  usersVotes   UserPostVote[]

  @@index([createdAt])
}

model User {
  id         Int            @id @default(autoincrement())
  email      String         @unique @db.VarChar(255)
  password   String
  resetToken String?
  firstname  String         @db.VarChar(255)
  lastname   String         @db.VarChar(255)
  admin      Boolean        @default(false)
  createdAt  DateTime       @default(now())
  Posts      Post[]
  postsVoted UserPostVote[]
}

model UserPostVote {
  postId    Int
  userId    Int
  type      VoteTypes
  createdAt DateTime  @default(now())
  post      Post      @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@index([type])
}

enum VoteTypes {
  UPVOTE
  DOWNVOTE
}
